{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2017-11-14T12:50:12.929271Z",
     "start_time": "2017-11-14T12:50:12.804311Z"
    }
   },
   "outputs": [],
   "source": [
    "# coding: utf-8\n",
    "\n",
    "import numpy as np\n",
    "import pickle\n",
    "import networkx as nx\n",
    "from matplotlib import pyplot as plt\n",
    "from label_propagation import LGC, HMN, PARW, OMNI, CAMLP\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import f1_score, accuracy_score\n",
    "from scipy.sparse import dok_matrix\n",
    "\n",
    "# 다른 비교 모델\n",
    "# https://networkx.github.io/documentation/stable/reference/algorithms/generated/networkx.algorithms.community.asyn_lpa.asyn_lpa_communities.html#networkx.algorithms.community.asyn_lpa.asyn_lpa_communities\n",
    "\n",
    "with open(\"data/tweets.txt\", 'rb') as f:\n",
    "    data = pickle.load(f)\n",
    "\n",
    "data = [(i, t['body'], t['label'], t['sentence_embedding']) for i, t in enumerate(data)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2017-11-14T11:44:12.188714Z",
     "start_time": "2017-11-14T11:43:16.686129Z"
    },
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "100\n",
      "200\n",
      "300\n",
      "400\n",
      "500\n",
      "600\n",
      "700\n",
      "800\n",
      "900\n",
      "1000\n",
      "1100\n",
      "1200\n",
      "1300\n",
      "1400\n",
      "1500\n",
      "1600\n",
      "1700\n",
      "1800\n",
      "1900\n",
      "2000\n",
      "2100\n",
      "2200\n",
      "2300\n",
      "2400\n",
      "2500\n",
      "2600\n",
      "2700\n",
      "2800\n",
      "2900\n",
      "3000\n",
      "3100\n",
      "3200\n",
      "3300\n",
      "3400\n",
      "3500\n",
      "3600\n",
      "3700\n",
      "3800\n",
      "3900\n",
      "4000\n",
      "4100\n",
      "4200\n",
      "4300\n",
      "4400\n",
      "4500\n",
      "4600\n",
      "4700\n",
      "4800\n",
      "4900\n",
      "5000\n",
      "5100\n",
      "5200\n",
      "5300\n",
      "5400\n",
      "5500\n",
      "5600\n",
      "5700\n",
      "5800\n",
      "5900\n",
      "6000\n",
      "6100\n",
      "6200\n",
      "6300\n"
     ]
    }
   ],
   "source": [
    "G = nx.Graph()\n",
    "for i, body, label, embedding in data:\n",
    "    words_i = set(body.split())\n",
    "    for j, body2, label2 in data[i+1:]:\n",
    "        words_j = set(body2.split())\n",
    "        \n",
    "        if len(words_i.intersection(words_j)) > 4:\n",
    "            G.add_edge(i, j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2017-11-14T11:56:44.735908Z",
     "start_time": "2017-11-14T11:56:44.731514Z"
    }
   },
   "outputs": [],
   "source": [
    "num_data = len(data)\n",
    "adjacency = dok_matrix((num_data, num_data), dtype=np.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2017-11-14T11:57:16.012614Z",
     "start_time": "2017-11-14T11:57:15.333930Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<6345x6345 sparse matrix of type '<class 'numpy.float32'>'\n",
       "\twith 52296 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in G.adj:\n",
    "    for j in G.adj[i]:\n",
    "        adjacency[i, j] = data[i][3].dot(data[j][3])\n",
    "        \n",
    "adjacency.tocsr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2017-11-14T12:23:15.670171Z",
     "start_time": "2017-11-14T12:23:15.645745Z"
    }
   },
   "outputs": [],
   "source": [
    "labels = {'related': 1, 'not related': 0}\n",
    "\n",
    "X_train = [i for i in range(135)]\n",
    "X_train.extend([i for i in range(1345, 1846)])\n",
    "X_train = np.array(X_train)\n",
    "\n",
    "X_test = [i for i in range(135, 1345)]\n",
    "X_test.extend([i for i in range(1846, num_data)])\n",
    "X_test = np.array(X_test)\n",
    "\n",
    "y_train = [labels[t[2]] for t in data[:135]]\n",
    "y_train.extend([labels[t[2]] for t in data[1345: 1846]])\n",
    "y_train = np.array(y_train)\n",
    "\n",
    "y_test = [labels[t[2]] for t in data[135: 1345]]\n",
    "y_test.extend([labels[t[2]] for t in data[1846: num_data]])\n",
    "y_test = np.array(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2017-11-14T12:52:01.163583Z",
     "start_time": "2017-11-14T12:51:56.114820Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=========================\n",
      "\n",
      "HMN\n",
      "Accuracy: 0.796462\n",
      "f1 score: 0.082148\n",
      "=========================\n",
      "\n",
      "LGC\n",
      "Accuracy: 0.796812\n",
      "f1 score: 0.089482\n"
     ]
    }
   ],
   "source": [
    "methods = [('HMN', HMN(), {'graph': [adjacency]}),\n",
    "           ('LGC', LGC(), {'graph': [adjacency], 'alpha':[\n",
    "            0.01, 0.05, 0.1, 0.5, 0.99]}),\n",
    "           # ('PARW', PARW(), {'graph':[adjacency], 'lamb':[0.01, 0.05, 0.01, 0.5, 0.99]}),\n",
    "           ('OMNI', OMNI(), {'graph': [adjacency], 'lamb':[\n",
    "            0.01, 0.1, 1.0, 10.0, 100.0]}),\n",
    "           ('CAMLP', CAMLP(), {'graph': [adjacency], 'beta':[\n",
    "            0.01, 0.1, 1.0, 10.0, 100.0], 'H':[np.array([[1, 0], [0, 1]]), np.array([[0, 1], [1, 0]])]})]\n",
    "\n",
    "models = []\n",
    "for name, clf, params in methods[:2]:\n",
    "    print(\"=========================\")\n",
    "    print(name)\n",
    "    gs = GridSearchCV(clf, params, cv=5)\n",
    "    gs.fit(X_train, y_train)\n",
    "\n",
    "    model = gs.best_estimator_\n",
    "    model.fit(X_train, y_train)\n",
    "    models.append(model)\n",
    "\n",
    "    predicted = model.predict(X_test)\n",
    "    print(\"Accuracy: %f\" % accuracy_score(y_test, predicted))\n",
    "    print(\"f1 score: %f\" % f1_score(y_test, predicted))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2017-11-14T12:56:59.079900Z",
     "start_time": "2017-11-14T12:56:59.074236Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5645\n",
      "5709\n"
     ]
    }
   ],
   "source": [
    "print(len(predicted[predicted==0]))\n",
    "print(len(predicted))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
